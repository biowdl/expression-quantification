version 1.0

import "tasks/common.wdl" as common
import "tasks/htseq.wdl" as htseq
import "tasks/mergecounts.wdl" as mergeCounts
import "tasks/stringtie.wdl" as stringtie_task

workflow MultiBamExpressionQuantification {
    input {
        Array[Pair[String,IndexedBamFile]]+ bams #(sample, (bam, index))
        String outputDir
        String strandedness
        File? referenceGtfFile # Not providing the reference gtf will have stringtie do an unguided assembly
    }

    String stringtieDir = outputDir + "/stringtie/"
    String htSeqDir = outputDir + "/fragments_per_gene/" 

    # call counters per sample
    scatter (sampleBam in bams) {
        IndexedBamFile bamFile = sampleBam.right
        String sampleId = sampleBam.left

        call stringtie_task.Stringtie as stringtie {
            input:
                bamFile = bamFile,
                assembledTranscriptsFile = stringtieDir + sampleId + ".gtf",
                geneAbundanceFile = stringtieDir + sampleId + ".abundance",
                firstStranded = if strandedness == "FR" then true else false,
                secondStranded = if strandedness == "RF" then true else false,
                referenceGtf = referenceGtfFile
        }

        call FetchCounts as fetchCountsStringtieTPM {
            input:
                abundanceFile = select_first([stringtie.geneAbundance]),
                outputFile = stringtieDir + "/TPM/" + sampleId + ".TPM",
                column = 9
        }

        call FetchCounts as fetchCountsStringtieFPKM {
            input:
                abundanceFile = select_first([stringtie.geneAbundance]),
                outputFile = stringtieDir + "/FPKM/" + sampleId + ".FPKM",
                column = 8
        }
    }

    call stringtie_task.Merge as mergeStringtieGtf {
        input:
            gtfFiles = stringtie.assembledTranscripts,
            outputGtfPath = stringtieDir + "/merged.gtf",
            guideGtf = referenceGtfFile
    }

    scatter (sampleBam in bams) {
        IndexedBamFile bamFile2 = sampleBam.right
        String sampleId2 = sampleBam.left

        Map[String, String] HTSeqStrandOptions = {"FR": "yes", "RF": "reverse", "None": "no"}
        call htseq.HTSeqCount as htSeqCount {
            input:
                inputBams = [bamFile2.file],
                inputBamsIndex = [bamFile2.index],
                outputTable = htSeqDir + sampleId2 + ".fragments_per_gene",
                stranded = HTSeqStrandOptions[strandedness],
                # Use the reference gtf if provided. Otherwise use the gtf file generated by stringtie
                gtfFile = select_first([referenceGtfFile, mergeStringtieGtf.mergedGtfFile])
        }
    }

    # Merge count tables into one multisample count table per count type
    if (defined(referenceGtfFile)) {
        # Feature IDs are not stable for Stringtie abundance measures if no reference GTF is given
        # Merging the tables in that case doesn't make sense, because we can't be sure that the
        # same IDs are pointing at the same transcript/gene.

        # FIXME These stringtie counts include novel stuff for which the IDs are likely not stable,
        # even when a reference GTF is given. Perhaps STRG entries sould therefore not be included
        # in the merged table, since we can't be sure that (eg.) STRG.1 in one sample is the same
        # as STRG.1 in another.
        call mergeCounts.MergeCounts as mergedStringtieTPMs {
            input:
                inputFiles = fetchCountsStringtieTPM.counts,
                outputFile = stringtieDir + "/TPM/all_samples.TPM",
                featureColumn = 1,
                valueColumn = 2,
                inputHasHeader = true
        }

        call mergeCounts.MergeCounts as mergedStringtieFPKMs {
            input:
                inputFiles = fetchCountsStringtieFPKM.counts,
                outputFile = stringtieDir + "/FPKM/all_samples.FPKM",
                featureColumn = 1,
                valueColumn = 2,
                inputHasHeader = true
        }
    }

    call mergeCounts.MergeCounts as mergedHTSeqFragmentsPerGenes {
        input:
            inputFiles = htSeqCount.counts,
            outputFile = htSeqDir + "/all_samples.fragments_per_gene",
            featureColumn = 1,
            valueColumn = 2,
            inputHasHeader = false
    }

    output {
        File fragmentsPerGeneTable = mergedHTSeqFragmentsPerGenes.mergedCounts
        File? FPKMTable = mergedStringtieFPKMs.mergedCounts
        File? TPMTable = mergedStringtieTPMs.mergedCounts

        Array[Pair[String, File]] sampleGtfFiles = zip(sampleId, stringtie.assembledTranscripts)
        File mergedGtfFile = mergeStringtieGtf.mergedGtfFile
    }
}


task FetchCounts {
    input {
        File abundanceFile
        String outputFile
        Int column
    }

    command <<<
        mkdir -p ~{sub(outputFile, basename(outputFile) + "$", "")}
        awk -F "\t" '{print $1 "\t" $~{column}}' ~{abundanceFile} > ~{outputFile}
    >>>

    output {
        File counts = outputFile
    }
}